# This is a basic workflow to help you get started with Actions 

name: NodeJS deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches: [ CICD, CICD_branch ]

jobs:  
  deploy_to_develop:     
    name: Build Image
    runs-on: 
      - self-hosted
      - Node

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr-thientest
#        IMAGE_TAG: nodejs_image_test_${{ steps.vars.outputs.PR_NUMBER }}
        IMAGE_TAG: nodejs_image_test_${{ github.run_number }}
        

      run: |
        echo $PR_NUMBER
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Running a service from images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr-thientest
        IMAGE_TAG: nodejs_image_test_${{ github.run_number }}
        
      run: |
        echo $PR_NUMBER
        docker stop minu-backend-service && docker rm minu-backend-service
        docker run --name minu-backend-service -dit -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - if: ${{ success() }}
      name: Send message to Slack API in success case
      id: notification
      uses: slackapi/slack-github-action@v1.18.0 
      with:
        payload: |
          {
            "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "GitHub Action build result: *${{ job.status }}!!!*\n${{ github.event.pull_request.html_url}}\nDownload Image here: https://ap-southeast-1.console.aws.amazon.com/ecr/repositories?region=ap-southeast-1"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - if: ${{ failure() }}
      continue-on-error: true
      name: Send message to Slack API in failure case
      id: notify
      uses: slackapi/slack-github-action@v1.18.0      
      with:
        payload: |
          {
            "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "GitHub Action build result: *${{ job.status }}!!!*\n${{ github.event.pull_request.html_url}}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  deploy_to_production:     
    name: Build Images
    runs-on: 
      - production

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_CLIENT_ID_GITRUNNER_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_GITRUNNER_PROD }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: minu_repo
#        IMAGE_TAG: nodejs_image_test_${{ steps.vars.outputs.PR_NUMBER }}
        IMAGE_TAG: nodejs_image_test_${{ github.run_number }}
        
      run: |
        echo $PR_NUMBER
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Running a service from images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: minu_repo
        IMAGE_TAG: nodejs_image_test_${{ github.run_number }}
        
      run: |
        echo $PR_NUMBER
        docker stop minu-backend-service && docker rm minu-backend-service
        docker run --name minu-backend-service -dit -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - if: ${{ success() }}
      name: Send message to Slack API in success case
      id: notify
      uses: slackapi/slack-github-action@v1.18.0 
      with:
        payload: |
          {
            "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "GitHub Action build result: *${{ job.status }}!!!*\n${{ github.event.pull_request.html_url}}\nDownload Image here: https://us-east-1.console.aws.amazon.com/ecr/repositories?region=us-east-1"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - if: ${{ failure() }}
      continue-on-error: true
      name: Send message to Slack API in failure case
      id: notify
      uses: slackapi/slack-github-action@v1.18.0      
      with:
        payload: |
          {
            "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "GitHub Action build result: *${{ job.status }}!!!*\n${{ github.event.pull_request.html_url}}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK